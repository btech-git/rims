<?php

class InvoiceHeaderController extends Controller
{
	/**
	 * @var string the default layout for the views. Defaults to '//layouts/column2', meaning
	 * using two-column layout. See 'protected/views/layouts/column2.php'.
	 */
	public $layout='//layouts/column1';
	public $defaultAction = 'admin';

	/**
	 * @return array action filters
	 */
	// public function filters()
	// {
	// 	return array(
	// 		'accessControl', // perform access control for CRUD operations
	// 		'postOnly + delete', // we only allow deletion via POST request
	// 	);
	// }

	/**
	 * Specifies the access control rules.
	 * This method is used by the 'accessControl' filter.
	 * @return array access control rules
	 */
	public function accessRules()
	{
		return array(
			array('allow',  // allow all users to perform 'index' and 'view' actions
				'actions'=>array('index','view'),
				'users'=>array('*'),
			),
			array('allow', // allow authenticated user to perform 'create' and 'update' actions
				'actions'=>array('create','update'),
				'users'=>array('@'),
			),
			array('allow', // allow admin user to perform 'admin' and 'delete' actions
				'actions'=>array('admin','delete','viewInvoices'),
				'users'=>array('admin'),
			),
			array('deny',  // deny all users
				'users'=>array('*'),
			),
		);
	}

	/**
	 * Displays a particular model.
	 * @param integer $id the ID of the model to be displayed
	 */
	public function actionView($id)
	{	
		$details = InvoiceDetail::model()->findAllByAttributes(array('invoice_id'=>$id));
		$this->render('view',array(
			'model'=>$this->loadModel($id),
			'details'=>$details,
		));
	}
	public function actionViewInvoices()
	{	
		$id = array(4,5);
		$criteria = new CDbCriteria;
		$criteria->addInCondition('id',$id);
		$invoices = InvoiceHeader::model()->findAll($criteria);

		//$details = InvoiceDetail::model()->findAllByAttributes(array('invoice_id'=>$id));
		$this->render('viewInvoices',array(
			//'model'=>$this->loadModel($id),
			//'details'=>$details,
			'invoices' =>$invoices,
		));
	}

	/**
	 * Creates a new model.
	 * If creation is successful, the browser will be redirected to the 'view' page.
	 */
	public function actionCreate()
	{
		//$model=new InvoiceHeader;

		// Uncomment the following line if AJAX validation is needed
		// $this->performAjaxValidation($model);

		$invoice = $this->instantiate(null);
		$this->performAjaxValidation($invoice->header);

		// if(isset($_POST['InvoiceHeader']))
		// {
		// 	$model->attributes=$_POST['InvoiceHeader'];
		// 	if($model->save())
		// 		$this->redirect(array('view','id'=>$model->id));
		// }
		if(isset($_POST['InvoiceHeader']))
		{

			$this->loadState($invoice);
			if ($invoice->save(Yii::app()->db)){
				$this->redirect(array('view', 'id' => $invoice->header->id));
			} 
			
		}

		$this->render('create',array(
			//'model'=>$model,
			'invoice'=>$invoice,

		));
	}

	/**
	 * Updates a particular model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 * @param integer $id the ID of the model to be updated
	 */
	public function actionUpdate($id)
	{
		//$model=$this->loadModel($id);

		// Uncomment the following line if AJAX validation is needed
		// $this->performAjaxValidation($model);
		$invoice = $this->instantiate($id);
		$this->performAjaxValidation($invoice->header);

		// if(isset($_POST['InvoiceHeader']))
		// {
		// 	$model->attributes=$_POST['InvoiceHeader'];
		// 	if($model->save())
		// 		$this->redirect(array('view','id'=>$model->id));
		// }
		if(isset($_POST['InvoiceHeader']))
		{


			$this->loadState($invoice);
			if ($invoice->save(Yii::app()->db)){
				$this->redirect(array('view', 'id' => $invoice->header->id));
			} 
		}

		$this->render('update',array(
			//'model'=>$model,
			'invoice'=>$invoice,
		));
	}

	/**
	 * Deletes a particular model.
	 * If deletion is successful, the browser will be redirected to the 'admin' page.
	 * @param integer $id the ID of the model to be deleted
	 */
	public function actionDelete($id)
	{
		$this->loadModel($id)->delete();

		// if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser
		if(!isset($_GET['ajax']))
			$this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));
	}

	/**
	 * Lists all models.
	 */
	public function actionIndex()
	{
		$dataProvider=new CActiveDataProvider('InvoiceHeader');
		$this->render('index',array(
			'dataProvider'=>$dataProvider,
		));
	}

	/**
	 * Manages all models.
	 */
	public function actionAdmin()
	{
		$model=new InvoiceHeader('search');
		$model->unsetAttributes();  // clear any default values
		if(isset($_GET['InvoiceHeader']))
			$model->attributes=$_GET['InvoiceHeader'];

		$this->render('admin',array(
			'model'=>$model,
		));
	}

	/**
	 * Returns the data model based on the primary key given in the GET variable.
	 * If the data model is not found, an HTTP exception will be raised.
	 * @param integer $id the ID of the model to be loaded
	 * @return InvoiceHeader the loaded model
	 * @throws CHttpException
	 */
	public function loadModel($id)
	{
		$model=InvoiceHeader::model()->findByPk($id);
		if($model===null)
			throw new CHttpException(404,'The requested page does not exist.');
		return $model;
	}

	/**
	 * Performs the AJAX validation.
	 * @param InvoiceHeader $model the model to be validated
	 */
	protected function performAjaxValidation($model)
	{
		if(isset($_POST['ajax']) && $_POST['ajax']==='invoice-header-form')
		{
			echo CActiveForm::validate($model);
			Yii::app()->end();
		}
	}

	public function instantiate($id)
	{
		if (empty($id)){
			$invoice = new Invoices(new InvoiceHeader(), array());
		}
		else
		{
			$invoiceModel = $this->loadModel($id);
			$invoice = new Invoices($invoiceModel, $invoiceModel->invoiceDetails);
			//print_r("test");
		}
		return $invoice;
	}
	public function loadState($invoice)
	{
		if (isset($_POST['InvoiceHeader']))
		{
			$invoice->header->attributes = $_POST['InvoiceHeader'];
		}


		if (isset($_POST['InvoiceDetail']))
		{
			foreach ($_POST['InvoiceDetail'] as $i => $item)
			{
				if (isset($invoice->details[$i])){
					$invoice->details[$i]->attributes = $item;

				}

				else
				{
					$detail = new InvoiceDetail();
					$detail->attributes = $item;
					$invoice->details[] = $detail;
					
				}
			}
			if (count($_POST['InvoiceDetail']) < count($invoice->details))
				array_splice($invoice->details, $i + 1);
		}
		else
		{
			$invoice->details = array();

		}

	}
	//Add Detail
	public function actionAjaxHtmlAddDetail($id,$productId)
	{
		if (Yii::app()->request->isAjaxRequest)
		{
			$product = new Product('search');
	      	$product->unsetAttributes();  // clear any default values
	      	if (isset($_GET['Product']))
	        	$product->attributes = $_GET['Product'];

			$productCriteria = new CDbCriteria;
			
			$productCriteria->together=true;
			$productCriteria->select = 't.id,t.name, rims_product_master_category.name as product_master_category_name, rims_product_sub_master_category.name as product_sub_master_category_name, rims_product_sub_category.name as product_sub_category_name, rims_brand.name as product_brand_name';
					$productCriteria->join = 'join rims_product_master_category on rims_product_master_category.id = t.product_master_category_id join rims_product_sub_master_category on rims_product_sub_master_category.id = t.product_sub_master_category_id join rims_product_sub_category on rims_product_sub_category.id = t.product_sub_category_id join rims_brand on rims_brand.id = t.brand_id ';
					$productCriteria->compare('t.name',$product->name,true);
					$productCriteria->compare('manufacturer_code',$product->manufacturer_code,true);
					$productCriteria->compare('findkeyword',$product->findkeyword,true);
					$productCriteria->compare('rims_product_master_category.name', $product->product_master_category_name,true);
					$productCriteria->compare('rims_product_sub_master_category.name', $product->product_sub_master_category_name,true);
					$productCriteria->compare('rims_product_sub_category.name', $product->product_sub_category_name,true);
					$productCriteria->compare('rims_brand.name', $product->product_brand_name,true);
			$productDataProvider = new CActiveDataProvider('Product', array(
			    	'criteria'=>$productCriteria,));

			$consignmentIn = $this->instantiate($id); 	
			$this->loadState($consignmentIn);
			
			$consignmentIn->addDetail($productId);
			Yii::app()->clientscript->scriptMap['jquery-ui.min.js'] = false;
   			Yii::app()->clientscript->scriptMap['jquery.js'] = false;
   			Yii::app()->clientscript->scriptMap['jquery.yiigridview.js'] = false;
      		$this->renderPartial('_detail', array('consignmentIn'=>$consignmentIn,'product'=>$product,
			'productDataProvider'=>$productDataProvider,
      	
      	), false, true);
		}
	}
	public function actionAjaxHtmlRemoveDetail($id, $index)
	{
		if (Yii::app()->request->isAjaxRequest)
		{

			$product = new Product('search');
	      	$product->unsetAttributes();  // clear any default values
	      	if (isset($_GET['Product']))
	        	$product->attributes = $_GET['Product'];

			$productCriteria = new CDbCriteria;
			$productCriteria->compare('name',$product->name,true);
			$productCriteria->compare('manufacturer_code',$product->manufacturer_code,true);
			$productCriteria->together=true;
			$productCriteria->select = 't.*, rims_product_master_category.name as product_master_category_name, rims_product_sub_master_category.name as product_sub_master_category_name, rims_product_sub_category.name as product_sub_category_name, rims_brand.name as product_brand_name';
					$productCriteria->join = 'join rims_product_master_category on rims_product_master_category.id = t.product_master_category_id join rims_product_sub_master_category on rims_product_sub_master_category.id = t.product_sub_master_category_id join rims_product_sub_category on rims_product_sub_category.id = t.product_sub_category_id join rims_brand on rims_brand.id = t.brand_id ';
					$productCriteria->compare('rims_product_master_category.name', $product->product_master_category_name,true);
					$productCriteria->compare('rims_product_sub_master_category.name', $product->product_sub_master_category_name,true);
					$productCriteria->compare('rims_product_sub_category.name', $product->product_sub_category_name,true);
					$productCriteria->compare('rims_brand.name', $product->product_brand_name,true);
			$productDataProvider = new CActiveDataProvider('Product', array(
			    	'criteria'=>$productCriteria,));

			$consignmentIn = $this->instantiate($id);
			$this->loadState($consignmentIn);

			$consignmentIn->removeDetailAt($index);
			Yii::app()->clientscript->scriptMap['jquery-ui.min.js'] = false;
      		Yii::app()->clientscript->scriptMap['jquery.js'] = false;
      		Yii::app()->clientscript->scriptMap['jquery.yiigridview.js'] = false;
			$this->renderPartial('_detail', array('consignmentIn'=>$consignmentIn,'product'=>$product,
				'productDataProvider'=>$productDataProvider,
      	
      		), false, true);
		}
	}
}
