<?php

/**
 * This is the model class for table auth_user.
 *
 * @package modules.authorization.models
 *
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $last_logged_in
 * @property string $session_key
 * @property string $status
 * @property integer $created_by
 * @property string $created_date
 * @property integer $modified_by
 * @property string $modified_date
 * @property integer $is_deleted
 * @property string $email
 * @property string $avatar
 */
class User extends MyActiveRecord
{
    // status
    const STATUS_ONLINE = 'Online';
    const STATUS_OFFLINE = 'Offline';
    const STATUS_BANNED = 'Banned';
    const STATUS_LOCKED = 'Locked';

    /**
     * @var string
     */
    public $employee_name;

    /**
     * @var string
     */
    public $password_repeat;

    /**
     * Returns the static model of the specified AR class.
     * @param string $className active record class name.
     * @return User the static model class
     */
    public static function model($className=__CLASS__)
    {
        return parent::model($className);
    }

    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
        return 'rims_user';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('username, created_date, email', 'required'),
            array('password, password_repeat', 'required', 'on'=>'insert'),
            array('username', 'length', 'min'=>5),
            array('username', 'length', 'max'=>20),
            array('username', 'isUsernameExist', 'on'=>'insert'),
            array('password', 'length', 'min'=>6),
            array('password', 'length', 'max'=>64),
            array('password', 'compare', 'compareAttribute'=>'password_repeat', 'on'=>'insert,update'),
            array('session_key', 'length', 'max'=>100),
            array('status', 'length', 'max'=>50),
            array('created_by, modified_by, is_deleted,employee_id', 'numerical', 'integerOnly'=>true),
            array('last_logged_in, password_repeat, modified_date, avatar', 'safe'),
            array('username, status, created_by, created_date, modified_by, modified_date, is_deleted, employee_id', 'safe', 'on'=>'search'),
            array('employee_name', 'safe', 'on'=>'search'),
        );
    }

    /**
     * Check if a username is exists
     */
    public function isUsernameExist() {
        $user = self::model()->find('username=?', array($this->username));
        if ($user != null) {
            $this->addError('username', 'Username is already exists.');
        }
    }

    /**
     * @return array
     */
    public function behaviors()
    {
        return array(
            'softDelete'=>array('class'=>'application.components.behaviors.SoftDeleteBehavior'),
            'HasCreatedBy'=>array('class'=>'application.components.behaviors.HasCreatedByBehavior'),
            'HasCreatedDate'=>array('class'=>'application.components.behaviors.HasCreatedDateBehavior'),
            'HasModifiedBy'=>array('class'=>'application.components.behaviors.HasModifiedByBehavior'),
            'HasModifiedDate'=>array('class'=>'application.components.behaviors.HasModifiedDateBehavior'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations()
    {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'employee' => array(self::BELONGS_TO, 'Employee', 'employee_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
        return array(
            'id' => Yii::t('string','ID'),
            'username' => Yii::t('string','Username'),
            'password' => Yii::t('string','Password'),
            'last_logged_in' => Yii::t('string','Last Logged In'),
            'session_key' => Yii::t('string','Session Key'),
            'status' => Yii::t('string','Status'),
            'created_by' => Yii::t('string','Created By'),
            'created_date' => Yii::t('string','Created Date'),
            'modified_by' => Yii::t('string','Modified By'),
            'modified_date' => Yii::t('string','Modified Date'),
            'is_deleted' => Yii::t('string', 'Is Deleted'),
            'employee_id' => Yii::t('string', 'Employee'),
            'email' => Yii::t('string', 'Email'),
            'avatar' => Yii::t('string', 'Avatar'),
        );
    }

    /**
     * @param string $password
     * @return string
     */
    public static function hashPassword($password) {
        return md5($password);
    }

    /**
     * @return mixed
     */
    protected function beforeValidate() {
        if ($this->status == null) {
            $this->status = User::STATUS_OFFLINE;
        }

        return parent::beforeValidate();
    }

    protected function afterValidate(){
        //$this->password = md5($this->password);
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
     */
    public function search()
    {
        // Warning: Please modify the following code to remove attributes that
        // should not be searched.

        $criteria=new CDbCriteria;

        $criteria->compare('LOWER(t.username)',strtolower($this->username),true);
        $criteria->compare('LOWER(a.name)',strtolower($this->employee_name),true);
        $criteria->compare('t.status',$this->status);

        $criteria->with = array(
            'employee'=>array('alias'=>'a'),
        );

        return new CActiveDataProvider($this, array(
            'criteria'=>$criteria,
            'sort'=>array(
                'attributes'=>array(
                    '*',

                ),
            ),
        ));
    }
}